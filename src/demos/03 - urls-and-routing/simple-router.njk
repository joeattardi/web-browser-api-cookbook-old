{% set description %}
<p class="mb-2">
  This is an example of basic client-side routing using the history API. 
</p>
<ul class="list-disc pl-6">
  <li>Clicking a link will change the URL by calling <code>history.pushState</code> and replace the app contents with the new route.</li>
  <li>If the user clicks the browser's Back or Forward button, we handle the <code>popstate</code> event to show the proper content.</li>
  <li>This is all done on the client side only. Other than the initial page load, no requests are sent to the server.
</ul>
{% endset %}

{% set templates %}
<template id="template-home">
  <h2 class="text-2xl">Home</h2>
  <p>This is the home page of the app</p>
</template>

<template id="template-about">
  <h2 class="text-2xl">About</h2>
  <p>This is the about page of the app</p>
</template>
{% endset%}

{% set layout %}

<main id="app">
  <nav class="my-2 p-4 bg-slate-300">
    <a class="p-2 rounded" href="/urls-and-routing/simple-router/">Home</a>
    <a class="p-2 rounded" href="/urls-and-routing/simple-router/about/">About</a>
  </nav>

  <!-- The currently selected route will render its content inside this <div> -->
  <div id="router-content"></div>
</main>
{% endset %}

{% set html %}
{{ templates | safe }}
{{ layout | safe }}
{% endset %}

{% set js %}
const content = document.querySelector('#router-content');
const app = document.querySelector('#app');

function createRouter() {
  const router = {

    // Associates known URL patterns with templates.
    routes: [
      { template: document.querySelector('#template-home'), path: '/urls-and-routing/simple-router/' },
      { template: document.querySelector('#template-about'), path: '/urls-and-routing/simple-router/about/' },
    ],

    /**
     * Renders the content associated with a URL by looking up the associated route.
     *
     * @param the desired URL path
     * @param pushState whether or not to fire a pushState call
     */
    navigate(path, pushState = true) {
      const route = this.routes.find((route) => route.path === path);
      if (route) {
        content.replaceChildren(route.template.content.cloneNode(true));
      }

      // Toggle some CSS classes to indicate the active route
      app.querySelector('.bg-cyan-400')?.classList.remove('bg-cyan-400');
      app.querySelector(`[href="${path}"`)?.classList.add('bg-cyan-400');

      if (pushState) {
        history.pushState({}, '', path);
      }
    },
  };

  function renderCurrentUrlContent() {
    const url = window.location.pathname;
    router.navigate(url, false);
  }

  // The `popstate` event fires when the Back or Forward buttons are clicked.
  // We check the new current URL and render the appropriate template.
  window.addEventListener('popstate', () => {
    renderCurrentUrlContent();
  });

  // On initial load, look at the URL and figure out what template we should display.
  renderCurrentUrlContent();

  return router;
}

const router = createRouter();

const links = app.querySelectorAll('a');
links.forEach(link => {
  link.addEventListener('click', event => {
    // Prevent the browser from actually navigating.
    event.preventDefault();

    // Perform a client-side only routing action.
    router.navigate(event.target.getAttribute('href'));
  });
});

{% endset %}

{% import 'code-block.njk' as codeBlock %}

{% set code %}
  {{ codeBlock.codeBlock(
    'Router implementation',
    'javascript',
    'A simple router object.',
    js
  )}}

  {{ codeBlock.codeBlock(
    'View templates',
    'html',
    'Basic templates for the Home and About pages of our single-page application.',
    templates
  )}}

  {{ codeBlock.codeBlock(
    'Tabs and layout',
    'html',
    'The application shell containing navigation tabs and an area to render the current page content.',
    layout
  )}}
{% endset %}

{% include "demo.njk" %}